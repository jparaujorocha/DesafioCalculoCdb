{"ast":null,"code":"import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\nclass InputManager {\n  constructor(htmlInputElement) {\n    this.htmlInputElement = htmlInputElement;\n  }\n  setCursorAt(position) {\n    if (this.htmlInputElement.setSelectionRange) {\n      this.htmlInputElement.focus();\n      this.htmlInputElement.setSelectionRange(position, position);\n    } else if (this.htmlInputElement.createTextRange) {\n      let textRange = this.htmlInputElement.createTextRange();\n      textRange.collapse(true);\n      textRange.moveEnd(\"character\", position);\n      textRange.moveStart(\"character\", position);\n      textRange.select();\n    }\n  }\n  updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n    this.rawValue = newRawValue;\n    let newLength = newRawValue.length;\n    selectionStart = selectionStart - (oldLength - newLength);\n    this.setCursorAt(selectionStart);\n  }\n  get canInputMoreNumbers() {\n    let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n    let selectionStart = this.inputSelection.selectionStart;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let haveNumberSelected = selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/) ? true : false;\n    let startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n    return haventReachedMaxLength || haveNumberSelected || startWithZero;\n  }\n  get inputSelection() {\n    let selectionStart = 0;\n    let selectionEnd = 0;\n    if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n      selectionStart = this.htmlInputElement.selectionStart;\n      selectionEnd = this.htmlInputElement.selectionEnd;\n    } else {\n      let range = document.getSelection().anchorNode;\n      if (range && range.firstChild == this.htmlInputElement) {\n        let lenght = this.htmlInputElement.value.length;\n        let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n        let startRange = this.htmlInputElement.createTextRange();\n        let endRange = this.htmlInputElement.createTextRange();\n        endRange.collapse(false);\n        if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n          selectionStart = selectionEnd = lenght;\n        } else {\n          selectionStart = -startRange.moveStart(\"character\", -lenght);\n          selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n          if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n            selectionEnd = lenght;\n          } else {\n            selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n            selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n          }\n        }\n      }\n    }\n    return {\n      selectionStart: selectionStart,\n      selectionEnd: selectionEnd\n    };\n  }\n  get rawValue() {\n    return this.htmlInputElement && this.htmlInputElement.value;\n  }\n  set rawValue(value) {\n    this._storedRawValue = value;\n    if (this.htmlInputElement) {\n      this.htmlInputElement.value = value;\n    }\n  }\n  get storedRawValue() {\n    return this._storedRawValue;\n  }\n}\nclass InputService {\n  constructor(htmlInputElement, options) {\n    this.htmlInputElement = htmlInputElement;\n    this.options = options;\n    this.inputManager = new InputManager(htmlInputElement);\n  }\n  addNumber(keyCode) {\n    if (!this.rawValue) {\n      this.rawValue = this.applyMask(false, \"0\");\n    }\n    let keyChar = String.fromCharCode(keyCode);\n    let selectionStart = this.inputSelection.selectionStart;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n    this.updateFieldValue(selectionStart + 1);\n  }\n  applyMask(isNumber, rawValue) {\n    let {\n      allowNegative,\n      decimal,\n      precision,\n      prefix,\n      suffix,\n      thousands\n    } = this.options;\n    rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n    let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n    if (!onlyNumbers) {\n      return \"\";\n    }\n    let integerPart = onlyNumbers.slice(0, onlyNumbers.length - precision).replace(/^0*/g, \"\").replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n    if (integerPart == \"\") {\n      integerPart = \"0\";\n    }\n    let newRawValue = integerPart;\n    let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n    if (precision > 0) {\n      decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n      newRawValue += decimal + decimalPart;\n    }\n    let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n    let operator = rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero ? \"-\" : \"\";\n    return operator + prefix + newRawValue + suffix;\n  }\n  clearMask(rawValue) {\n    if (rawValue == null || rawValue == \"\") {\n      return null;\n    }\n    let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n    if (this.options.thousands) {\n      value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n    }\n    if (this.options.decimal) {\n      value = value.replace(this.options.decimal, \".\");\n    }\n    return parseFloat(value);\n  }\n  changeToNegative() {\n    if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n      let selectionStart = this.inputSelection.selectionStart;\n      this.rawValue = \"-\" + this.rawValue;\n      this.updateFieldValue(selectionStart + 1);\n    }\n  }\n  changeToPositive() {\n    let selectionStart = this.inputSelection.selectionStart;\n    this.rawValue = this.rawValue.replace(\"-\", \"\");\n    this.updateFieldValue(selectionStart - 1);\n  }\n  fixCursorPosition(forceToEndPosition) {\n    let currentCursorPosition = this.inputSelection.selectionStart;\n    //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n    if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n      this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition());\n      //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n    } else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n      this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n    }\n  }\n  getRawValueWithoutSuffixEndPosition() {\n    return this.rawValue.length - this.options.suffix.length;\n  }\n  getRawValueWithoutPrefixStartPosition() {\n    return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n  }\n  removeNumber(keyCode) {\n    let {\n      decimal,\n      thousands\n    } = this.options;\n    let selectionEnd = this.inputSelection.selectionEnd;\n    let selectionStart = this.inputSelection.selectionStart;\n    if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n      selectionEnd = this.rawValue.length - this.options.suffix.length;\n      selectionStart = this.rawValue.length - this.options.suffix.length;\n    }\n    //there is no selection\n    if (selectionEnd == selectionStart) {\n      //delete key and the target digit is a number\n      if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n        selectionEnd = selectionEnd + 1;\n      }\n      //delete key and the target digit is the decimal or thousands divider\n      if ((keyCode == 46 || keyCode == 63272) && (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\n        selectionEnd = selectionEnd + 2;\n        selectionStart = selectionStart + 1;\n      }\n      //backspace key and the target digit is a number\n      if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n        selectionStart = selectionStart - 1;\n      }\n      //backspace key and the target digit is the decimal or thousands divider\n      if (keyCode == 8 && (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\n        selectionStart = selectionStart - 2;\n        selectionEnd = selectionEnd - 1;\n      }\n    }\n    this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n    this.updateFieldValue(selectionStart);\n  }\n  updateFieldValue(selectionStart) {\n    let newRawValue = this.applyMask(false, this.rawValue || \"\");\n    selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n    this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n  }\n  updateOptions(options) {\n    let value = this.value;\n    this.options = options;\n    this.value = value;\n  }\n  get canInputMoreNumbers() {\n    return this.inputManager.canInputMoreNumbers;\n  }\n  get inputSelection() {\n    return this.inputManager.inputSelection;\n  }\n  get rawValue() {\n    return this.inputManager.rawValue;\n  }\n  set rawValue(value) {\n    this.inputManager.rawValue = value;\n  }\n  get storedRawValue() {\n    return this.inputManager.storedRawValue;\n  }\n  get value() {\n    return this.clearMask(this.rawValue);\n  }\n  set value(value) {\n    this.rawValue = this.applyMask(true, \"\" + value);\n  }\n}\nclass InputHandler {\n  constructor(htmlInputElement, options) {\n    this.inputService = new InputService(htmlInputElement, options);\n    this.htmlInputElement = htmlInputElement;\n  }\n  handleClick(event, chromeAndroid) {\n    let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n    //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n    if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n      this.inputService.fixCursorPosition(chromeAndroid);\n    }\n  }\n  handleCut(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 0);\n  }\n  handleInput(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n    let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n    let rawValueLength = this.inputService.rawValue.length;\n    let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n    let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n    let storedRawValueLength = this.inputService.storedRawValue.length;\n    this.inputService.rawValue = this.inputService.storedRawValue;\n    if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n      this.setCursorPosition(event);\n      return;\n    }\n    if (rawValueLength < storedRawValueLength) {\n      if (this.inputService.value != 0) {\n        this.inputService.removeNumber(8);\n      } else {\n        this.setValue(null);\n      }\n    }\n    if (rawValueLength > storedRawValueLength) {\n      switch (keyCode) {\n        case 43:\n          this.inputService.changeToPositive();\n          break;\n        case 45:\n          this.inputService.changeToNegative();\n          break;\n        default:\n          if (!this.inputService.canInputMoreNumbers || isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null) {\n            return;\n          }\n          this.inputService.addNumber(keyCode);\n      }\n    }\n    this.setCursorPosition(event);\n    this.onModelChange(this.inputService.value);\n  }\n  handleKeydown(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n    let keyCode = event.which || event.charCode || event.keyCode;\n    if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n      event.preventDefault();\n      let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n      if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n        this.setValue(null);\n        this.onModelChange(this.inputService.value);\n      }\n      if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n      if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n        this.inputService.removeNumber(keyCode);\n        this.onModelChange(this.inputService.value);\n      }\n    }\n  }\n  handleKeypress(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n    let keyCode = event.which || event.charCode || event.keyCode;\n    if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n      return;\n    }\n    switch (keyCode) {\n      case 43:\n        this.inputService.changeToPositive();\n        break;\n      case 45:\n        this.inputService.changeToNegative();\n        break;\n      default:\n        if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n          this.inputService.addNumber(keyCode);\n        }\n    }\n    event.preventDefault();\n    this.onModelChange(this.inputService.value);\n  }\n  handleKeyup(event) {\n    this.inputService.fixCursorPosition();\n  }\n  handlePaste(event) {\n    if (this.isReadOnly()) {\n      return;\n    }\n    setTimeout(() => {\n      this.inputService.updateFieldValue();\n      this.setValue(this.inputService.value);\n      this.onModelChange(this.inputService.value);\n    }, 1);\n  }\n  updateOptions(options) {\n    this.inputService.updateOptions(options);\n  }\n  getOnModelChange() {\n    return this.onModelChange;\n  }\n  setOnModelChange(callbackFunction) {\n    this.onModelChange = callbackFunction;\n  }\n  getOnModelTouched() {\n    return this.onModelTouched;\n  }\n  setOnModelTouched(callbackFunction) {\n    this.onModelTouched = callbackFunction;\n  }\n  setValue(value) {\n    this.inputService.value = value;\n  }\n  getNewKeyCode(oldString, newString) {\n    if (oldString.length > newString.length) {\n      return null;\n    }\n    for (let x = 0; x < newString.length; x++) {\n      if (oldString.length == x || oldString[x] != newString[x]) {\n        return newString.charCodeAt(x);\n      }\n    }\n    return null;\n  }\n  isArrowEndHomeKeyInFirefox(event) {\n    if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n      return true;\n    }\n    return false;\n  }\n  isReadOnly() {\n    return this.htmlInputElement && this.htmlInputElement.readOnly;\n  }\n  setCursorPosition(event) {\n    let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n    // For some reason, in Android, the event got override before the timeout and change the target.\n    const inputElement = event.target;\n    setTimeout(function () {\n      inputElement.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n    }, 0);\n  }\n}\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n  provide: NG_VALUE_ACCESSOR,\n  useExisting: forwardRef(() => CurrencyMaskDirective),\n  multi: true\n};\nclass CurrencyMaskDirective {\n  constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n    this.currencyMaskConfig = currencyMaskConfig;\n    this.elementRef = elementRef;\n    this.keyValueDiffers = keyValueDiffers;\n    this.options = {};\n    this.optionsTemplate = {\n      align: \"right\",\n      allowNegative: true,\n      decimal: \".\",\n      precision: 2,\n      prefix: \"$ \",\n      suffix: \"\",\n      thousands: \",\"\n    };\n    if (currencyMaskConfig) {\n      this.optionsTemplate = currencyMaskConfig;\n    }\n    this.keyValueDiffer = keyValueDiffers.find({}).create();\n  }\n  ngAfterViewInit() {\n    this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n  }\n  ngDoCheck() {\n    if (this.keyValueDiffer.diff(this.options)) {\n      this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n      this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n    }\n  }\n  ngOnInit() {\n    this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n  }\n  handleBlur(event) {\n    this.inputHandler.getOnModelTouched().apply(event);\n  }\n  handleClick(event) {\n    this.inputHandler.handleClick(event, this.isChromeAndroid());\n  }\n  handleCut(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleCut(event);\n    }\n  }\n  handleInput(event) {\n    if (this.isChromeAndroid()) {\n      this.inputHandler.handleInput(event);\n    }\n  }\n  handleKeydown(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleKeydown(event);\n    }\n  }\n  handleKeypress(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleKeypress(event);\n    }\n  }\n  handleKeyup(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handleKeyup(event);\n    }\n  }\n  handlePaste(event) {\n    if (!this.isChromeAndroid()) {\n      this.inputHandler.handlePaste(event);\n    }\n  }\n  isChromeAndroid() {\n    return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n  }\n  registerOnChange(callbackFunction) {\n    this.inputHandler.setOnModelChange(callbackFunction);\n  }\n  registerOnTouched(callbackFunction) {\n    this.inputHandler.setOnModelTouched(callbackFunction);\n  }\n  setDisabledState(value) {\n    this.elementRef.nativeElement.disabled = value;\n  }\n  validate(abstractControl) {\n    let result = {};\n    if (abstractControl.value > this.max) {\n      result.max = true;\n    }\n    if (abstractControl.value < this.min) {\n      result.min = true;\n    }\n    return result != {} ? result : null;\n  }\n  writeValue(value) {\n    this.inputHandler.setValue(value);\n  }\n}\nCurrencyMaskDirective.ɵfac = function CurrencyMaskDirective_Factory(t) {\n  return new (t || CurrencyMaskDirective)(i0.ɵɵdirectiveInject(CURRENCY_MASK_CONFIG, 8), i0.ɵɵdirectiveInject(i0.ElementRef), i0.ɵɵdirectiveInject(i0.KeyValueDiffers));\n};\nCurrencyMaskDirective.ɵdir = /* @__PURE__ */i0.ɵɵdefineDirective({\n  type: CurrencyMaskDirective,\n  selectors: [[\"\", \"currencyMask\", \"\"]],\n  hostBindings: function CurrencyMaskDirective_HostBindings(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵlistener(\"blur\", function CurrencyMaskDirective_blur_HostBindingHandler($event) {\n        return ctx.handleBlur($event);\n      })(\"click\", function CurrencyMaskDirective_click_HostBindingHandler($event) {\n        return ctx.handleClick($event);\n      })(\"cut\", function CurrencyMaskDirective_cut_HostBindingHandler($event) {\n        return ctx.handleCut($event);\n      })(\"input\", function CurrencyMaskDirective_input_HostBindingHandler($event) {\n        return ctx.handleInput($event);\n      })(\"keydown\", function CurrencyMaskDirective_keydown_HostBindingHandler($event) {\n        return ctx.handleKeydown($event);\n      })(\"keypress\", function CurrencyMaskDirective_keypress_HostBindingHandler($event) {\n        return ctx.handleKeypress($event);\n      })(\"keyup\", function CurrencyMaskDirective_keyup_HostBindingHandler($event) {\n        return ctx.handleKeyup($event);\n      })(\"paste\", function CurrencyMaskDirective_paste_HostBindingHandler($event) {\n        return ctx.handlePaste($event);\n      });\n    }\n  },\n  inputs: {\n    max: \"max\",\n    min: \"min\",\n    options: \"options\"\n  },\n  features: [i0.ɵɵProvidersFeature([CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, {\n    provide: NG_VALIDATORS,\n    useExisting: CurrencyMaskDirective,\n    multi: true\n  }])]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyMaskDirective, [{\n    type: Directive,\n    args: [{\n      selector: \"[currencyMask]\",\n      providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, {\n        provide: NG_VALIDATORS,\n        useExisting: CurrencyMaskDirective,\n        multi: true\n      }]\n    }]\n  }], function () {\n    return [{\n      type: undefined,\n      decorators: [{\n        type: Optional\n      }, {\n        type: Inject,\n        args: [CURRENCY_MASK_CONFIG]\n      }]\n    }, {\n      type: i0.ElementRef\n    }, {\n      type: i0.KeyValueDiffers\n    }];\n  }, {\n    max: [{\n      type: Input\n    }],\n    min: [{\n      type: Input\n    }],\n    options: [{\n      type: Input\n    }],\n    handleBlur: [{\n      type: HostListener,\n      args: [\"blur\", [\"$event\"]]\n    }],\n    handleClick: [{\n      type: HostListener,\n      args: [\"click\", [\"$event\"]]\n    }],\n    handleCut: [{\n      type: HostListener,\n      args: [\"cut\", [\"$event\"]]\n    }],\n    handleInput: [{\n      type: HostListener,\n      args: [\"input\", [\"$event\"]]\n    }],\n    handleKeydown: [{\n      type: HostListener,\n      args: [\"keydown\", [\"$event\"]]\n    }],\n    handleKeypress: [{\n      type: HostListener,\n      args: [\"keypress\", [\"$event\"]]\n    }],\n    handleKeyup: [{\n      type: HostListener,\n      args: [\"keyup\", [\"$event\"]]\n    }],\n    handlePaste: [{\n      type: HostListener,\n      args: [\"paste\", [\"$event\"]]\n    }]\n  });\n})();\nclass CurrencyMaskModule {}\nCurrencyMaskModule.ɵfac = function CurrencyMaskModule_Factory(t) {\n  return new (t || CurrencyMaskModule)();\n};\nCurrencyMaskModule.ɵmod = /* @__PURE__ */i0.ɵɵdefineNgModule({\n  type: CurrencyMaskModule\n});\nCurrencyMaskModule.ɵinj = /* @__PURE__ */i0.ɵɵdefineInjector({\n  imports: [[CommonModule, FormsModule]]\n});\n(function () {\n  (typeof ngDevMode === \"undefined\" || ngDevMode) && i0.ɵsetClassMetadata(CurrencyMaskModule, [{\n    type: NgModule,\n    args: [{\n      imports: [CommonModule, FormsModule],\n      declarations: [CurrencyMaskDirective],\n      exports: [CurrencyMaskDirective]\n    }]\n  }], null, null);\n})();\n\n/*\n * Public API Surface of ng2-currency-mask\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskModule };","map":{"version":3,"names":["i0","InjectionToken","forwardRef","Directive","Optional","Inject","Input","HostListener","NgModule","NG_VALUE_ACCESSOR","NG_VALIDATORS","FormsModule","CommonModule","CURRENCY_MASK_CONFIG","InputManager","constructor","htmlInputElement","setCursorAt","position","setSelectionRange","focus","createTextRange","textRange","collapse","moveEnd","moveStart","select","updateValueAndCursor","newRawValue","oldLength","selectionStart","rawValue","newLength","length","canInputMoreNumbers","haventReachedMaxLength","maxLength","inputSelection","selectionEnd","haveNumberSelected","value","substring","match","startWithZero","range","document","getSelection","anchorNode","firstChild","lenght","normalizedValue","replace","startRange","endRange","compareEndPoints","slice","split","_storedRawValue","storedRawValue","InputService","options","inputManager","addNumber","keyCode","applyMask","keyChar","String","fromCharCode","updateFieldValue","isNumber","allowNegative","decimal","precision","prefix","suffix","thousands","Number","toFixed","onlyNumbers","integerPart","decimalPart","repeat","isZero","parseInt","operator","indexOf","clearMask","RegExp","parseFloat","changeToNegative","charAt","changeToPositive","fixCursorPosition","forceToEndPosition","currentCursorPosition","getRawValueWithoutSuffixEndPosition","getRawValueWithoutPrefixStartPosition","removeNumber","test","undefined","updateOptions","InputHandler","inputService","handleClick","event","chromeAndroid","selectionRangeLength","Math","abs","isNaN","handleCut","isReadOnly","setTimeout","setValue","onModelChange","handleInput","getNewKeyCode","rawValueLength","rawValueSelectionEnd","rawValueWithoutSuffixEndPosition","storedRawValueLength","setCursorPosition","handleKeydown","which","charCode","preventDefault","handleKeypress","isArrowEndHomeKeyInFirefox","handleKeyup","handlePaste","getOnModelChange","setOnModelChange","callbackFunction","getOnModelTouched","onModelTouched","setOnModelTouched","oldString","newString","x","charCodeAt","readOnly","inputElement","target","CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR","provide","useExisting","CurrencyMaskDirective","multi","currencyMaskConfig","elementRef","keyValueDiffers","optionsTemplate","align","keyValueDiffer","find","create","ngAfterViewInit","nativeElement","style","textAlign","ngDoCheck","diff","inputHandler","Object","assign","ngOnInit","handleBlur","apply","isChromeAndroid","navigator","userAgent","registerOnChange","registerOnTouched","setDisabledState","disabled","validate","abstractControl","result","max","min","writeValue","ɵfac","ElementRef","KeyValueDiffers","ɵdir","type","args","selector","providers","decorators","CurrencyMaskModule","ɵmod","ɵinj","imports","declarations","exports"],"sources":["C:/Users/Joao Pedro/source/repos/DesafioCalculoCdb/DesafioCalculoCdb.Front/node_modules/ng2-currency-mask/fesm2020/ng2-currency-mask.mjs"],"sourcesContent":["import * as i0 from '@angular/core';\nimport { InjectionToken, forwardRef, Directive, Optional, Inject, Input, HostListener, NgModule } from '@angular/core';\nimport { NG_VALUE_ACCESSOR, NG_VALIDATORS, FormsModule } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\n\nlet CURRENCY_MASK_CONFIG = new InjectionToken(\"currency.mask.config\");\n\nclass InputManager {\n    constructor(htmlInputElement) {\n        this.htmlInputElement = htmlInputElement;\n    }\n    setCursorAt(position) {\n        if (this.htmlInputElement.setSelectionRange) {\n            this.htmlInputElement.focus();\n            this.htmlInputElement.setSelectionRange(position, position);\n        }\n        else if (this.htmlInputElement.createTextRange) {\n            let textRange = this.htmlInputElement.createTextRange();\n            textRange.collapse(true);\n            textRange.moveEnd(\"character\", position);\n            textRange.moveStart(\"character\", position);\n            textRange.select();\n        }\n    }\n    updateValueAndCursor(newRawValue, oldLength, selectionStart) {\n        this.rawValue = newRawValue;\n        let newLength = newRawValue.length;\n        selectionStart = selectionStart - (oldLength - newLength);\n        this.setCursorAt(selectionStart);\n    }\n    get canInputMoreNumbers() {\n        let haventReachedMaxLength = !(this.rawValue.length >= this.htmlInputElement.maxLength && this.htmlInputElement.maxLength >= 0);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let haveNumberSelected = selectionStart != selectionEnd && this.htmlInputElement.value.substring(selectionStart, selectionEnd).match(/\\d/) ? true : false;\n        let startWithZero = this.htmlInputElement.value.substring(0, 1) == \"0\";\n        return haventReachedMaxLength || haveNumberSelected || startWithZero;\n    }\n    get inputSelection() {\n        let selectionStart = 0;\n        let selectionEnd = 0;\n        if (typeof this.htmlInputElement.selectionStart == \"number\" && typeof this.htmlInputElement.selectionEnd == \"number\") {\n            selectionStart = this.htmlInputElement.selectionStart;\n            selectionEnd = this.htmlInputElement.selectionEnd;\n        }\n        else {\n            let range = document.getSelection().anchorNode;\n            if (range && range.firstChild == this.htmlInputElement) {\n                let lenght = this.htmlInputElement.value.length;\n                let normalizedValue = this.htmlInputElement.value.replace(/\\r\\n/g, \"\\n\");\n                let startRange = this.htmlInputElement.createTextRange();\n                let endRange = this.htmlInputElement.createTextRange();\n                endRange.collapse(false);\n                if (startRange.compareEndPoints(\"StartToEnd\", endRange) > -1) {\n                    selectionStart = selectionEnd = lenght;\n                }\n                else {\n                    selectionStart = -startRange.moveStart(\"character\", -lenght);\n                    selectionStart += normalizedValue.slice(0, selectionStart).split(\"\\n\").length - 1;\n                    if (startRange.compareEndPoints(\"EndToEnd\", endRange) > -1) {\n                        selectionEnd = lenght;\n                    }\n                    else {\n                        selectionEnd = -startRange.moveEnd(\"character\", -lenght);\n                        selectionEnd += normalizedValue.slice(0, selectionEnd).split(\"\\n\").length - 1;\n                    }\n                }\n            }\n        }\n        return {\n            selectionStart: selectionStart,\n            selectionEnd: selectionEnd,\n        };\n    }\n    get rawValue() {\n        return this.htmlInputElement && this.htmlInputElement.value;\n    }\n    set rawValue(value) {\n        this._storedRawValue = value;\n        if (this.htmlInputElement) {\n            this.htmlInputElement.value = value;\n        }\n    }\n    get storedRawValue() {\n        return this._storedRawValue;\n    }\n}\n\nclass InputService {\n    constructor(htmlInputElement, options) {\n        this.htmlInputElement = htmlInputElement;\n        this.options = options;\n        this.inputManager = new InputManager(htmlInputElement);\n    }\n    addNumber(keyCode) {\n        if (!this.rawValue) {\n            this.rawValue = this.applyMask(false, \"0\");\n        }\n        let keyChar = String.fromCharCode(keyCode);\n        let selectionStart = this.inputSelection.selectionStart;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        this.rawValue = this.rawValue.substring(0, selectionStart) + keyChar + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart + 1);\n    }\n    applyMask(isNumber, rawValue) {\n        let { allowNegative, decimal, precision, prefix, suffix, thousands } = this.options;\n        rawValue = isNumber ? new Number(rawValue).toFixed(precision) : rawValue;\n        let onlyNumbers = rawValue.replace(/[^0-9]/g, \"\");\n        if (!onlyNumbers) {\n            return \"\";\n        }\n        let integerPart = onlyNumbers\n            .slice(0, onlyNumbers.length - precision)\n            .replace(/^0*/g, \"\")\n            .replace(/\\B(?=(\\d{3})+(?!\\d))/g, thousands);\n        if (integerPart == \"\") {\n            integerPart = \"0\";\n        }\n        let newRawValue = integerPart;\n        let decimalPart = onlyNumbers.slice(onlyNumbers.length - precision);\n        if (precision > 0) {\n            decimalPart = \"0\".repeat(precision - decimalPart.length) + decimalPart;\n            newRawValue += decimal + decimalPart;\n        }\n        let isZero = parseInt(integerPart) == 0 && (parseInt(decimalPart) == 0 || decimalPart == \"\");\n        let operator = rawValue.indexOf(\"-\") > -1 && allowNegative && !isZero ? \"-\" : \"\";\n        return operator + prefix + newRawValue + suffix;\n    }\n    clearMask(rawValue) {\n        if (rawValue == null || rawValue == \"\") {\n            return null;\n        }\n        let value = rawValue.replace(this.options.prefix, \"\").replace(this.options.suffix, \"\");\n        if (this.options.thousands) {\n            value = value.replace(new RegExp(\"\\\\\" + this.options.thousands, \"g\"), \"\");\n        }\n        if (this.options.decimal) {\n            value = value.replace(this.options.decimal, \".\");\n        }\n        return parseFloat(value);\n    }\n    changeToNegative() {\n        if (this.options.allowNegative && this.rawValue != \"\" && this.rawValue.charAt(0) != \"-\" && this.value != 0) {\n            let selectionStart = this.inputSelection.selectionStart;\n            this.rawValue = \"-\" + this.rawValue;\n            this.updateFieldValue(selectionStart + 1);\n        }\n    }\n    changeToPositive() {\n        let selectionStart = this.inputSelection.selectionStart;\n        this.rawValue = this.rawValue.replace(\"-\", \"\");\n        this.updateFieldValue(selectionStart - 1);\n    }\n    fixCursorPosition(forceToEndPosition) {\n        let currentCursorPosition = this.inputSelection.selectionStart;\n        //if the current cursor position is after the number end position, it is moved to the end of the number, ignoring the prefix or suffix. this behavior can be forced with forceToEndPosition flag\n        if (currentCursorPosition > this.getRawValueWithoutSuffixEndPosition() || forceToEndPosition) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutSuffixEndPosition());\n            //if the current cursor position is before the number start position, it is moved to the start of the number, ignoring the prefix or suffix\n        }\n        else if (currentCursorPosition < this.getRawValueWithoutPrefixStartPosition()) {\n            this.inputManager.setCursorAt(this.getRawValueWithoutPrefixStartPosition());\n        }\n    }\n    getRawValueWithoutSuffixEndPosition() {\n        return this.rawValue.length - this.options.suffix.length;\n    }\n    getRawValueWithoutPrefixStartPosition() {\n        return this.value != null && this.value < 0 ? this.options.prefix.length + 1 : this.options.prefix.length;\n    }\n    removeNumber(keyCode) {\n        let { decimal, thousands } = this.options;\n        let selectionEnd = this.inputSelection.selectionEnd;\n        let selectionStart = this.inputSelection.selectionStart;\n        if (selectionStart > this.rawValue.length - this.options.suffix.length) {\n            selectionEnd = this.rawValue.length - this.options.suffix.length;\n            selectionStart = this.rawValue.length - this.options.suffix.length;\n        }\n        //there is no selection\n        if (selectionEnd == selectionStart) {\n            //delete key and the target digit is a number\n            if ((keyCode == 46 || keyCode == 63272) && /^\\d+$/.test(this.rawValue.substring(selectionStart, selectionEnd + 1))) {\n                selectionEnd = selectionEnd + 1;\n            }\n            //delete key and the target digit is the decimal or thousands divider\n            if ((keyCode == 46 || keyCode == 63272) &&\n                (this.rawValue.substring(selectionStart, selectionEnd + 1) == decimal || this.rawValue.substring(selectionStart, selectionEnd + 1) == thousands)) {\n                selectionEnd = selectionEnd + 2;\n                selectionStart = selectionStart + 1;\n            }\n            //backspace key and the target digit is a number\n            if (keyCode == 8 && /^\\d+$/.test(this.rawValue.substring(selectionStart - 1, selectionEnd))) {\n                selectionStart = selectionStart - 1;\n            }\n            //backspace key and the target digit is the decimal or thousands divider\n            if (keyCode == 8 &&\n                (this.rawValue.substring(selectionStart - 1, selectionEnd) == decimal || this.rawValue.substring(selectionStart - 1, selectionEnd) == thousands)) {\n                selectionStart = selectionStart - 2;\n                selectionEnd = selectionEnd - 1;\n            }\n        }\n        this.rawValue = this.rawValue.substring(0, selectionStart) + this.rawValue.substring(selectionEnd, this.rawValue.length);\n        this.updateFieldValue(selectionStart);\n    }\n    updateFieldValue(selectionStart) {\n        let newRawValue = this.applyMask(false, this.rawValue || \"\");\n        selectionStart = selectionStart == undefined ? this.rawValue.length : selectionStart;\n        this.inputManager.updateValueAndCursor(newRawValue, this.rawValue.length, selectionStart);\n    }\n    updateOptions(options) {\n        let value = this.value;\n        this.options = options;\n        this.value = value;\n    }\n    get canInputMoreNumbers() {\n        return this.inputManager.canInputMoreNumbers;\n    }\n    get inputSelection() {\n        return this.inputManager.inputSelection;\n    }\n    get rawValue() {\n        return this.inputManager.rawValue;\n    }\n    set rawValue(value) {\n        this.inputManager.rawValue = value;\n    }\n    get storedRawValue() {\n        return this.inputManager.storedRawValue;\n    }\n    get value() {\n        return this.clearMask(this.rawValue);\n    }\n    set value(value) {\n        this.rawValue = this.applyMask(true, \"\" + value);\n    }\n}\n\nclass InputHandler {\n    constructor(htmlInputElement, options) {\n        this.inputService = new InputService(htmlInputElement, options);\n        this.htmlInputElement = htmlInputElement;\n    }\n    handleClick(event, chromeAndroid) {\n        let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n        //if there is no selection and the value is not null, the cursor position will be fixed. if the browser is chrome on android, the cursor will go to the end of the number.\n        if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n            this.inputService.fixCursorPosition(chromeAndroid);\n        }\n    }\n    handleCut(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 0);\n    }\n    handleInput(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = this.getNewKeyCode(this.inputService.storedRawValue, this.inputService.rawValue);\n        let rawValueLength = this.inputService.rawValue.length;\n        let rawValueSelectionEnd = this.inputService.inputSelection.selectionEnd;\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        let storedRawValueLength = this.inputService.storedRawValue.length;\n        this.inputService.rawValue = this.inputService.storedRawValue;\n        if ((rawValueSelectionEnd != rawValueWithoutSuffixEndPosition || Math.abs(rawValueLength - storedRawValueLength) != 1) && storedRawValueLength != 0) {\n            this.setCursorPosition(event);\n            return;\n        }\n        if (rawValueLength < storedRawValueLength) {\n            if (this.inputService.value != 0) {\n                this.inputService.removeNumber(8);\n            }\n            else {\n                this.setValue(null);\n            }\n        }\n        if (rawValueLength > storedRawValueLength) {\n            switch (keyCode) {\n                case 43:\n                    this.inputService.changeToPositive();\n                    break;\n                case 45:\n                    this.inputService.changeToNegative();\n                    break;\n                default:\n                    if (!this.inputService.canInputMoreNumbers || (isNaN(this.inputService.value) && String.fromCharCode(keyCode).match(/\\d/) == null)) {\n                        return;\n                    }\n                    this.inputService.addNumber(keyCode);\n            }\n        }\n        this.setCursorPosition(event);\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeydown(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == 8 || keyCode == 46 || keyCode == 63272) {\n            event.preventDefault();\n            let selectionRangeLength = Math.abs(this.inputService.inputSelection.selectionEnd - this.inputService.inputSelection.selectionStart);\n            if (selectionRangeLength == this.inputService.rawValue.length || this.inputService.value == 0) {\n                this.setValue(null);\n                this.onModelChange(this.inputService.value);\n            }\n            if (selectionRangeLength == 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n            if ((keyCode === 8 || keyCode === 46) && selectionRangeLength != 0 && !isNaN(this.inputService.value)) {\n                this.inputService.removeNumber(keyCode);\n                this.onModelChange(this.inputService.value);\n            }\n        }\n    }\n    handleKeypress(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        let keyCode = event.which || event.charCode || event.keyCode;\n        if (keyCode == undefined || [9, 13].indexOf(keyCode) != -1 || this.isArrowEndHomeKeyInFirefox(event)) {\n            return;\n        }\n        switch (keyCode) {\n            case 43:\n                this.inputService.changeToPositive();\n                break;\n            case 45:\n                this.inputService.changeToNegative();\n                break;\n            default:\n                if (this.inputService.canInputMoreNumbers && (!isNaN(this.inputService.value) || String.fromCharCode(keyCode).match(/\\d/) != null)) {\n                    this.inputService.addNumber(keyCode);\n                }\n        }\n        event.preventDefault();\n        this.onModelChange(this.inputService.value);\n    }\n    handleKeyup(event) {\n        this.inputService.fixCursorPosition();\n    }\n    handlePaste(event) {\n        if (this.isReadOnly()) {\n            return;\n        }\n        setTimeout(() => {\n            this.inputService.updateFieldValue();\n            this.setValue(this.inputService.value);\n            this.onModelChange(this.inputService.value);\n        }, 1);\n    }\n    updateOptions(options) {\n        this.inputService.updateOptions(options);\n    }\n    getOnModelChange() {\n        return this.onModelChange;\n    }\n    setOnModelChange(callbackFunction) {\n        this.onModelChange = callbackFunction;\n    }\n    getOnModelTouched() {\n        return this.onModelTouched;\n    }\n    setOnModelTouched(callbackFunction) {\n        this.onModelTouched = callbackFunction;\n    }\n    setValue(value) {\n        this.inputService.value = value;\n    }\n    getNewKeyCode(oldString, newString) {\n        if (oldString.length > newString.length) {\n            return null;\n        }\n        for (let x = 0; x < newString.length; x++) {\n            if (oldString.length == x || oldString[x] != newString[x]) {\n                return newString.charCodeAt(x);\n            }\n        }\n        return null;\n    }\n    isArrowEndHomeKeyInFirefox(event) {\n        if ([35, 36, 37, 38, 39, 40].indexOf(event.keyCode) != -1 && (event.charCode == undefined || event.charCode == 0)) {\n            return true;\n        }\n        return false;\n    }\n    isReadOnly() {\n        return this.htmlInputElement && this.htmlInputElement.readOnly;\n    }\n    setCursorPosition(event) {\n        let rawValueWithoutSuffixEndPosition = this.inputService.getRawValueWithoutSuffixEndPosition();\n        // For some reason, in Android, the event got override before the timeout and change the target.\n        const inputElement = event.target;\n        setTimeout(function () {\n            inputElement.setSelectionRange(rawValueWithoutSuffixEndPosition, rawValueWithoutSuffixEndPosition);\n        }, 0);\n    }\n}\n\nconst CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR = {\n    provide: NG_VALUE_ACCESSOR,\n    useExisting: forwardRef(() => CurrencyMaskDirective),\n    multi: true,\n};\nclass CurrencyMaskDirective {\n    constructor(currencyMaskConfig, elementRef, keyValueDiffers) {\n        this.currencyMaskConfig = currencyMaskConfig;\n        this.elementRef = elementRef;\n        this.keyValueDiffers = keyValueDiffers;\n        this.options = {};\n        this.optionsTemplate = {\n            align: \"right\",\n            allowNegative: true,\n            decimal: \".\",\n            precision: 2,\n            prefix: \"$ \",\n            suffix: \"\",\n            thousands: \",\",\n        };\n        if (currencyMaskConfig) {\n            this.optionsTemplate = currencyMaskConfig;\n        }\n        this.keyValueDiffer = keyValueDiffers.find({}).create();\n    }\n    ngAfterViewInit() {\n        this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n    }\n    ngDoCheck() {\n        if (this.keyValueDiffer.diff(this.options)) {\n            this.elementRef.nativeElement.style.textAlign = this.options.align ? this.options.align : this.optionsTemplate.align;\n            this.inputHandler.updateOptions(Object.assign({}, this.optionsTemplate, this.options));\n        }\n    }\n    ngOnInit() {\n        this.inputHandler = new InputHandler(this.elementRef.nativeElement, Object.assign({}, this.optionsTemplate, this.options));\n    }\n    handleBlur(event) {\n        this.inputHandler.getOnModelTouched().apply(event);\n    }\n    handleClick(event) {\n        this.inputHandler.handleClick(event, this.isChromeAndroid());\n    }\n    handleCut(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleCut(event);\n        }\n    }\n    handleInput(event) {\n        if (this.isChromeAndroid()) {\n            this.inputHandler.handleInput(event);\n        }\n    }\n    handleKeydown(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeydown(event);\n        }\n    }\n    handleKeypress(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeypress(event);\n        }\n    }\n    handleKeyup(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handleKeyup(event);\n        }\n    }\n    handlePaste(event) {\n        if (!this.isChromeAndroid()) {\n            this.inputHandler.handlePaste(event);\n        }\n    }\n    isChromeAndroid() {\n        return /chrome/i.test(navigator.userAgent) && /android/i.test(navigator.userAgent);\n    }\n    registerOnChange(callbackFunction) {\n        this.inputHandler.setOnModelChange(callbackFunction);\n    }\n    registerOnTouched(callbackFunction) {\n        this.inputHandler.setOnModelTouched(callbackFunction);\n    }\n    setDisabledState(value) {\n        this.elementRef.nativeElement.disabled = value;\n    }\n    validate(abstractControl) {\n        let result = {};\n        if (abstractControl.value > this.max) {\n            result.max = true;\n        }\n        if (abstractControl.value < this.min) {\n            result.min = true;\n        }\n        return result != {} ? result : null;\n    }\n    writeValue(value) {\n        this.inputHandler.setValue(value);\n    }\n}\nCurrencyMaskDirective.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskDirective, deps: [{ token: CURRENCY_MASK_CONFIG, optional: true }, { token: i0.ElementRef }, { token: i0.KeyValueDiffers }], target: i0.ɵɵFactoryTarget.Directive });\nCurrencyMaskDirective.ɵdir = i0.ɵɵngDeclareDirective({ minVersion: \"12.0.0\", version: \"13.1.1\", type: CurrencyMaskDirective, selector: \"[currencyMask]\", inputs: { max: \"max\", min: \"min\", options: \"options\" }, host: { listeners: { \"blur\": \"handleBlur($event)\", \"click\": \"handleClick($event)\", \"cut\": \"handleCut($event)\", \"input\": \"handleInput($event)\", \"keydown\": \"handleKeydown($event)\", \"keypress\": \"handleKeypress($event)\", \"keyup\": \"handleKeyup($event)\", \"paste\": \"handlePaste($event)\" } }, providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective, multi: true }], ngImport: i0 });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskDirective, decorators: [{\n            type: Directive,\n            args: [{\n                    selector: \"[currencyMask]\",\n                    providers: [CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, { provide: NG_VALIDATORS, useExisting: CurrencyMaskDirective, multi: true }],\n                }]\n        }], ctorParameters: function () { return [{ type: undefined, decorators: [{\n                    type: Optional\n                }, {\n                    type: Inject,\n                    args: [CURRENCY_MASK_CONFIG]\n                }] }, { type: i0.ElementRef }, { type: i0.KeyValueDiffers }]; }, propDecorators: { max: [{\n                type: Input\n            }], min: [{\n                type: Input\n            }], options: [{\n                type: Input\n            }], handleBlur: [{\n                type: HostListener,\n                args: [\"blur\", [\"$event\"]]\n            }], handleClick: [{\n                type: HostListener,\n                args: [\"click\", [\"$event\"]]\n            }], handleCut: [{\n                type: HostListener,\n                args: [\"cut\", [\"$event\"]]\n            }], handleInput: [{\n                type: HostListener,\n                args: [\"input\", [\"$event\"]]\n            }], handleKeydown: [{\n                type: HostListener,\n                args: [\"keydown\", [\"$event\"]]\n            }], handleKeypress: [{\n                type: HostListener,\n                args: [\"keypress\", [\"$event\"]]\n            }], handleKeyup: [{\n                type: HostListener,\n                args: [\"keyup\", [\"$event\"]]\n            }], handlePaste: [{\n                type: HostListener,\n                args: [\"paste\", [\"$event\"]]\n            }] } });\n\nclass CurrencyMaskModule {\n}\nCurrencyMaskModule.ɵfac = i0.ɵɵngDeclareFactory({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskModule, deps: [], target: i0.ɵɵFactoryTarget.NgModule });\nCurrencyMaskModule.ɵmod = i0.ɵɵngDeclareNgModule({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskModule, declarations: [CurrencyMaskDirective], imports: [CommonModule, FormsModule], exports: [CurrencyMaskDirective] });\nCurrencyMaskModule.ɵinj = i0.ɵɵngDeclareInjector({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskModule, imports: [[CommonModule, FormsModule]] });\ni0.ɵɵngDeclareClassMetadata({ minVersion: \"12.0.0\", version: \"13.1.1\", ngImport: i0, type: CurrencyMaskModule, decorators: [{\n            type: NgModule,\n            args: [{\n                    imports: [CommonModule, FormsModule],\n                    declarations: [CurrencyMaskDirective],\n                    exports: [CurrencyMaskDirective],\n                }]\n        }] });\n\n/*\n * Public API Surface of ng2-currency-mask\n */\n\n/**\n * Generated bundle index. Do not edit.\n */\n\nexport { CURRENCYMASKDIRECTIVE_VALUE_ACCESSOR, CURRENCY_MASK_CONFIG, CurrencyMaskDirective, CurrencyMaskModule };\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}